#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LALPHA 0
#define LNAV 1
#define LSYM 2
#define LNUM 3
#define LMED 4
#define LEXT 5
#define LWIN 6

/ {

	macros {
        pths: parentheses {
            label = "Double parentheses";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp LPAR &kp RPAR>
                , <&kp LEFT>
                ;
        };
	braces: braces {
            label = "Double braces";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp LBRC &kp RBRC>
                , <&kp LEFT>
                ;
        };
	bkts: brackets {
            label = "Double brackets";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp LBKT &kp RBKT &kp LEFT>
                ;
        };
    	assign: assign {
            label = "Assignment syntax";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp SPACE &kp EQUAL &kp SPACE>
                ;
        };
	wh: wh {
            label = "wh digraph";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp W &kp H>
                ;
        };
	carr: carriage_ret {
            label = "end_line_carriage_ret";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp LG(RIGHT) &kp ENTER>
                ;
        };
	carrbk: carriage_ret_back {
            label = "end_line_carriage_ret_back";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp LG(RIGHT) &kp ENTER &kp LS(TAB)>
                ;
        };
	carrfor: carriage_ret_forward {
            label = "end_line_carriage_ret_forward";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp LG(RIGHT) &kp ENTER &kp TAB>
                ;
        };
	hline: highlight_line {
            label = "highlight_line";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp LG(RIGHT) &kp LG(LS(LEFT))>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_COMMA {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp COMMA>;
        };
	combo_PERIOD {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp PERIOD>;
        };
	combo_backspace {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp BACKSPACE>;
        };
	combo_space {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp SPACE>;
        };
	combo_ret {
            timeout-ms = <50>;
            key-positions = <0 1>;
	    layers = <0>;
            bindings = <&kp ENTER>;
        };
	combo_q {
            timeout-ms = <50>;
            key-positions = <1 2 3>;
	    layers = <0>;
            bindings = <&kp Q>;
        };
	combo_change_window {
            timeout-ms = <50>;
            key-positions = <1 2>;
	    layers = <0>;
            bindings = <&kp LG(TILDE)>;
        };
	combo_change_app {
            timeout-ms = <50>;
            key-positions = <9 10>;
	    layers = <0>;
            bindings = <&kp LG(TAB)>;
        };
	combo_x {
            timeout-ms = <50>;
            key-positions = <0 8>;
	    layers = <0>;
            bindings = <&kp X>;
        };
	combo_b {
            timeout-ms = <50>;
            key-positions = <1 9>;
	    layers = <0>;
            bindings = <&kp B>;
        };
	combo_y {
            timeout-ms = <50>;
            key-positions = <3 11>;
	    layers = <0>;
            bindings = <&kp Y>;
        };
	combo_k {
            timeout-ms = <50>;
            key-positions = <2 10>;
	    layers = <0>;
            bindings = <&kp K>;
        };
	combo_ret2 {
            timeout-ms = <50>;
            key-positions = <6 7>;
	    layers = <0>;
            bindings = <&kp ENTER>;
        };
	combo_j {
            timeout-ms = <50>;
            key-positions = <4 5 6>;
	    layers = <0>;
            bindings = <&kp J>;
        };
	combo_f {
            timeout-ms = <50>;
            key-positions = <4 12>;
	    layers = <0>;
            bindings = <&kp F>;
        };
	combo_w {
            timeout-ms = <50>;
            key-positions = <5 13>;
	    layers = <0>;
            bindings = <&kp W>;
        };
	combo_v {
            timeout-ms = <50>;
            key-positions = <6 14>;
	    layers = <0>;
            bindings = <&kp V>;
        };
	combo_z {
            timeout-ms = <50>;
            key-positions = <7 15>;
	    layers = <0>;
            bindings = <&kp Z>;
        };
	combo_wh {
            timeout-ms = <50>;
            key-positions = <5 12 13>;
	    layers = <0>;
            bindings = <&wh>;
        };
	combo_apo {
            timeout-ms = <50>;
            key-positions = <13 14>;
	    layers = <0>;
            bindings = <&kp APOSTROPHE>;
        };
	combo_tab2 {
            timeout-ms = <50>;
            key-positions = <8 9>;
	    layers = <0>;
            bindings = <&kp TAB>;
        };
	combo_tilde {
            timeout-ms = <50>;
            key-positions = <14 15>;
	    layers = <0>;
            bindings = <&kp GRAVE>;
        };
	combo_layer_media {
            timeout-ms = <50>;
            key-positions = <17 18>;
	    layers = <0>;
            bindings = <&mo LMED>;
        };
	combo_layer_win {
            timeout-ms = <50>;
            key-positions = <18 19>;
	    layers = <0>;
            bindings = <&mo LWIN>;
        };
	combo_layer_num {
            timeout-ms = <50>;
            key-positions = <5 6>;
	    layers = <0>;
            bindings = <&mo LNUM>;
        };
	combo_layer_extended {
            timeout-ms = <50>;
            key-positions = <16 19>;
	    layers = <0>;
            bindings = <&mo LEXT>;
        };
    };

        behaviors {
    td1: tap_dance_1_F1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N1>, <&kp F1>;
        };
    td2: tap_dance_2_F2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N2>, <&kp F2>;
        };
    td3: tap_dance_3_F3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N3>, <&kp F3>;
        };
    td4: tap_dance_4_F4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N4>, <&kp F4>;
        };
    td5: tap_dance_5_F5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_5";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N5>, <&kp F5>;
        };
    td6: tap_dance_6_F6 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_6";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N6>, <&kp F6>;
        };
    td7: tap_dance_7_F7 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_7";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N7>, <&kp F7>;
        };
    td8: tap_dance_8_F8 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_8";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N8>, <&kp F8>;
        };
    td9: tap_dance_9_F9 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_9";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N9>, <&kp F9>;
        };
    tdpar: tap_dance_par {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PAR";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&pths >, <&kp LPAR>, <&kp RPAR>;
        };
    tdbrc: tap_dance_braces {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BRACES";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&braces >, <&kp LBRC>, <&kp RBRC>;
        };
    tdbkt: tap_dance_bkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BKTS";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&bkts >, <&kp LBKT>, <&kp RBKT>;
        };

    tdexat: tap_dance_ex_at {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EX_AT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp EXCLAMATION>, <&kp AT>;
        };
    tdhapc: tap_dance_hash_perc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_HASH_PERC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp HASH>, <&kp PERCENT>;
        };
    tddlht: tap_dance_dol_hat {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DOL_HAT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DOLLAR>, <&kp CARET>;
        };
    tdapqt: tap_dance_apo_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_APO_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp APOSTROPHE>, <&kp DOUBLE_QUOTES>;
        };
    tdstnd: tap_dance_star_and {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_STAR_AND";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ASTERISK>, <&kp AMPERSAND>;
        };
    tdequal: tap_dance_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EQUAL_PLUS_ASSIGN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp EQUAL>, <&kp PLUS>, <&assign>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha_layer {
            bindings = <
            	&kp M		&kp P    	&kp L       &kp D            &kp C		&kp R       &kp U		&kp G
                &kp A    	&kp O    	&kp E	 	&kp I            &kp H		&kp T		&kp N		&kp S
                                        &kp LGUI 	&mo LNAV         &kp LSHIFT	&mo LSYM
                	>;
        };

        nav_layer {
            bindings = <
            	&kp ESC		&kp LG(X)	&kp LG(V)   &kp LG(C)        &kp LA(BSPC) &kp UP    &kp LA(DEL)	&kp DEL
                &kp RCTRL   &sk LSHIFT  &sk RALT 	&sk RGUI	     &kp LEFT	  &kp DOWN	&kp RIGHT	&kp LG(LS(SPACE))
                                        &kp LG(Z) 	&trans           &kp TAB	  &none
                	>;
        };

        sym_layer {
            bindings = <
            	&tdexat		&kp LT    	&kp GT      &tdpar           &tdbrc		&tdbkt      &kp SLASH	&kp BACKSLASH
                &tdhapc    	&tddlht    	&tdstnd	    &kp COLON         &kp SEMI	&tdapqt		&kp MINUS	&tdequal
                                        &kp LG(Z)     	&kp LSHIFT       &kp TILDE	&trans
                	>;
        };

        num_layer {
            bindings = <
            	&td1		&td2    	&td3        	&td4            &kp PERIOD	&trans      &trans	&kp ENTER
                &td5    	&td6    	&td7     	&td8            &kp COMMA	&kp F10      &kp F11	&kp F12
                                        	&td9 	    	&kp N0          &none	    	&none
                	>;
        };

        media_layer {
            bindings = <
            	&none		&kp C_PREV    &kp C_PP    &kp C_NEXT       &kp LG(LS(N4)) &kp F14   &kp F15		&kp F16	
                &none       &kp C_VOL_DN  &kp K_MUTE  &kp C_VOL_UP     &none		  &none    	&none		&none
                                          &none 	  &trans           &trans	      &none
                	>;
        };
	
	extension_layer {
            bindings = <
            	&none	&none    &kp LA(MINUS)    &kp LA(LS(MINUS))       	&carrbk		&carr	  	 &carrfor	&hline	
                &none   &none  	 &kp LA(LS(N8))   &kp LA(LS(N9))		&kp LG(MINUS)	&kp LG(EQUAL)   &none		&none
                                 &trans	  &none         			&none	&trans
                	>;
        };
	win_layer {
            bindings = <
            	&kp ESCAPE	&kp LC(X)    	&kp LC(V)     	&kp LC(C)       &kp LC(BSPC)	&kp UP      &kp LC(DEL)	&kp DEL
                &kp LGUI    	&kp LSHIFT    	&kp LALT     	&kp LCTRL       &kp LEFT	&kp DOWN    &kp RIGHT	&none
                                        	&kp TAB 	&none	        &trans	    &trans
                	>;
        };
    };
};

